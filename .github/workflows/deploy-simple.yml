name: Deploy to EC2 (Simple)

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        echo "테스트 실행 중..."
        # python -m pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.LLM_OUTFIT_EC2_HOST }}
        username: ${{ secrets.LLM_OUTFIT_EC2_USERNAME }}
        key: ${{ secrets.LLM_OUTFIT_EC2_SSH_KEY }}
        script: |
          echo "🚀 TheFirstTake LLM Outfit API 배포를 시작합니다..."
          
          # 프로젝트 디렉토리 확인 및 설정
          PROJECT_DIR="/home/ubuntu/TheFirstTake-llm-outfit"
          
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "📁 프로젝트 디렉토리를 생성하고 리포지토리를 clone합니다..."
            git clone https://github.com/SWMTheFirstTake/TheFirstTake-llm-outfit.git
            cd $PROJECT_DIR
          else
            echo "📁 기존 프로젝트 디렉토리를 사용합니다..."
            cd $PROJECT_DIR
            
            # git pull 전에 충돌하는 untracked 파일들 정리
            echo "🧹 충돌하는 파일들을 정리합니다..."
            git clean -fd
            git reset --hard HEAD
            
            git pull origin main
          fi
          
          # Python 가상환경 확인 및 생성
          if [ ! -d "venv" ]; then
            echo "📦 Python 가상환경을 생성합니다..."
            python3 -m venv venv
          fi
          
          # 가상환경 활성화 및 의존성 설치
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # 환경변수 설정 (.env 파일 생성)
          echo "🔐 환경변수를 설정합니다..."
          cat > .env <<EOF
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          S3_COMBINATION_BUCKET_NAME=${{ secrets.S3_COMBINATION_BUCKET_NAME }}
          S3_COMBINATION_BUCKET_IMAGE_PREFIX=${{ secrets.S3_COMBINATION_BUCKET_IMAGE_PREFIX }}
          S3_COMBINATION_BUCKET_JSON_PREFIX=${{ secrets.S3_COMBINATION_BUCKET_JSON_PREFIX }}
          ENVIRONMENT=production
          DEBUG=False
          LLM_API_HOST=0.0.0.0
          LLM_API_PORT=6020
          LOG_LEVEL=INFO
          EOF
          
          # .env 파일 권한 설정 (보안상 중요)
          chmod 600 .env

          echo "🔄 기존 서비스를 중지합니다..."
          # 포트 기반 정리 (안전함)
          echo "포트 6020 정리 중..."
          lsof -ti:6020 | xargs -r kill -TERM 2>/dev/null || true
          sleep 3

          # systemctl도 이제 안전하게 사용 가능
          if sudo systemctl is-active --quiet llm-outfit-api; then
              sudo systemctl stop llm-outfit-api
              sleep 3
          fi
          # echo "1단계: 현재 프로세스 목록 확인"
          # ps aux | grep uvicorn | head -5

          # echo "2단계: 포트 사용 상황 확인"
          # netstat -tlnp | grep 6020 || echo "포트 6020 사용 안함"

          # echo "3단계: lsof로 정리"
          # lsof -ti:6020 | head -5 || echo "lsof 결과 없음"

          # echo "4단계: 실제 정리 실행"
          # lsof -ti:6020 | xargs -r kill -TERM 2>/dev/null || echo "kill 명령어 완료"

          # echo "✅ 모든 단계 완료"
          
          # 서비스 파일 생성
          echo "⚙️ 서비스 파일을 생성합니다..."
          sudo tee /etc/systemd/system/llm-outfit-api.service > /dev/null <<EOF
          [Unit]
          Description=TheFirstTake LLM Outfit API
          After=network.target
          
          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=$PROJECT_DIR
          Environment=PATH=$PROJECT_DIR/venv/bin
          Environment=ENVIRONMENT=production
          Environment=DEBUG=False
          Environment=LLM_API_HOST=0.0.0.0
          Environment=LLM_API_PORT=6020
          Environment=REDIS_HOST=${{ secrets.REDIS_HOST }}
          Environment=REDIS_PORT=${{ secrets.REDIS_PORT }}
          Environment=AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          Environment=AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          Environment=AWS_REGION=${{ secrets.AWS_REGION }}
          Environment=S3_COMBINATION_BUCKET_NAME=${{ secrets.S3_COMBINATION_BUCKET_NAME }}
          Environment=S3_COMBINATION_BUCKET_IMAGE_PREFIX=${{ secrets.S3_COMBINATION_BUCKET_IMAGE_PREFIX }}
          Environment=S3_COMBINATION_BUCKET_JSON_PREFIX=${{ secrets.S3_COMBINATION_BUCKET_JSON_PREFIX }}
          Environment=LOG_LEVEL=INFO
          ExecStart=$PROJECT_DIR/venv/bin/uvicorn main:app --host 0.0.0.0 --port 6020
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # 서비스 등록 및 시작
          echo "🚀 서비스를 시작합니다..."
          sudo systemctl daemon-reload
          sudo systemctl enable llm-outfit-api
          sudo systemctl start llm-outfit-api
          
          # 배포 확인
          echo "✅ 배포가 완료되었습니다!"
          echo "📍 서버 주소: http://${{ secrets.LLM_OUTFIT_EC2_HOST }}:6020"
          
          # 서비스 상태 확인
          sudo systemctl status llm-outfit-api --no-pager

# name: Deploy to EC2 (Disk Space Fixed)

# on:
#   push:
#     branches: [ main ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.11'
    
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
    
#     - name: Run tests
#       run: |
#         echo "테스트 실행 중..."
#         # python -m pytest

#   deploy:
#     needs: test
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Deploy to EC2
#       uses: appleboy/ssh-action@v1.0.0
#       with:
#         host: ${{ secrets.LLM_OUTFIT_EC2_HOST }}
#         username: ${{ secrets.LLM_OUTFIT_EC2_USERNAME }}
#         key: ${{ secrets.LLM_OUTFIT_EC2_SSH_KEY }}
#         script: |
#           echo "🚀 TheFirstTake LLM Outfit API 배포를 시작합니다..."
          
#           # 1. 시스템 정보 확인
#           echo "📊 시스템 상태 확인:"
#           echo "디스크 사용량:"
#           df -h
#           echo "메모리 사용량:"
#           free -h
#           echo "임시 디렉토리 확인:"
#           ls -la /tmp/ | head -5 || echo "/tmp 접근 불가"
          
#           # 2. 디스크 정리
#           echo "🧹 디스크 정리 시작..."
          
#           # 로그 파일 정리
#           sudo find /var/log -name "*.log" -type f -size +100M -delete 2>/dev/null || true
#           sudo find /var/log -name "*.log.*" -type f -mtime +7 -delete 2>/dev/null || true
          
#           # apt 캐시 정리
#           sudo apt-get clean 2>/dev/null || true
#           sudo apt-get autoremove -y 2>/dev/null || true
          
#           # Docker 정리 (있다면)
#           docker system prune -f 2>/dev/null || true
          
#           # 임시 파일 정리
#           sudo find /tmp -type f -atime +7 -delete 2>/dev/null || true
#           sudo find /var/tmp -type f -atime +7 -delete 2>/dev/null || true
          
#           # 오래된 Python 캐시 정리
#           find /home/ubuntu -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
#           find /home/ubuntu -name "*.pyc" -delete 2>/dev/null || true
          
#           echo "정리 후 디스크 상태:"
#           df -h
          
#           # 3. 임시 디렉토리 권한 확인 및 수정
#           echo "🔧 임시 디렉토리 설정..."
#           sudo mkdir -p /tmp /var/tmp
#           sudo chmod 1777 /tmp /var/tmp
          
#           # 4. 기존 서비스 종료
#           echo "🔄 기존 서비스를 중지합니다..."
#           sudo systemctl stop llm-outfit-api 2>/dev/null || true
#           sudo lsof -ti:6020 | xargs -r sudo kill -9 2>/dev/null || true
#           sudo pkill -9 -f "uvicorn.*main:app" 2>/dev/null || true
#           sleep 3
          
#           # 5. 프로젝트 디렉토리 설정
#           cd /home/ubuntu
#           PROJECT_DIR="/home/ubuntu/TheFirstTake-llm-outfit"
#           REPO_URL="https://github.com/SWMTheFirstTake/TheFirstTake-llm-outfit.git"
          
#           # 기존 디렉토리 삭제 (공간 확보)
#           if [ -d "$PROJECT_DIR" ]; then
#             echo "📁 기존 프로젝트 디렉토리를 삭제합니다..."
#             rm -rf "$PROJECT_DIR"
#           fi
          
#           # 6. 새로 clone
#           echo "📁 리포지토리를 clone합니다..."
#           git clone "$REPO_URL"
#           cd "$PROJECT_DIR"
          
#           # 7. Python 가상환경 생성 (시스템 Python 사용)
#           echo "📦 Python 가상환경을 생성합니다..."
          
#           # venv 대신 더 안전한 방법 사용
#           if ! python3 -m venv venv --system-site-packages; then
#             echo "⚠️ venv 생성 실패, pip --user 방식으로 대체..."
#             # venv 없이 사용자 설치로 대체
#             mkdir -p /home/ubuntu/.local/bin
#             export PATH="/home/ubuntu/.local/bin:$PATH"
#             pip3 install --user --upgrade pip
#             pip3 install --user -r requirements.txt
#             PYTHON_CMD="python3"
#             PIP_CMD="pip3"
#           else
#             echo "✅ venv 생성 성공"
#             source venv/bin/activate
#             pip install --upgrade pip
#             pip install -r requirements.txt
#             PYTHON_CMD="$PROJECT_DIR/venv/bin/python3"
#             PIP_CMD="$PROJECT_DIR/venv/bin/pip"
#           fi
          
#           # 8. 환경변수 설정 (작은 파일로)
#           echo "🔐 환경변수를 설정합니다..."
#           cat > .env <<'EOF'
#           ENVIRONMENT=production
#           DEBUG=False
#           LLM_API_HOST=0.0.0.0
#           LLM_API_PORT=6020
#           LOG_LEVEL=INFO
#           EOF
          
#           # API 키들은 별도로 추가 (파일 크기 최소화)
#           echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
#           echo "CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}" >> .env
#           echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
#           echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          
#           chmod 600 .env
          
#           # 9. 서비스 파일 생성 (간소화)
#           echo "⚙️ 서비스 파일을 생성합니다..."
#           sudo tee /etc/systemd/system/llm-outfit-api.service > /dev/null <<EOF
#           [Unit]
#           Description=TheFirstTake LLM Outfit API
#           After=network.target
          
#           [Service]
#           Type=simple
#           User=ubuntu
#           WorkingDirectory=$PROJECT_DIR
#           Environment=PATH=/home/ubuntu/.local/bin:$PROJECT_DIR/venv/bin:/usr/local/bin:/usr/bin:/bin
#           EnvironmentFile=$PROJECT_DIR/.env
#           ExecStart=$PYTHON_CMD -m uvicorn main:app --host 0.0.0.0 --port 6020
#           Restart=always
#           RestartSec=10
#           StandardOutput=journal
#           StandardError=journal
          
#           [Install]
#           WantedBy=multi-user.target
#           EOF
          
#           # 10. 서비스 시작
#           echo "🚀 서비스를 시작합니다..."
#           sudo systemctl daemon-reload
#           sudo systemctl enable llm-outfit-api
#           sudo systemctl start llm-outfit-api
          
#           # 11. 잠시 대기 후 상태 확인
#           sleep 10
          
#           echo "🔍 서비스 상태:"
#           sudo systemctl status llm-outfit-api --no-pager || true
          
#           echo "📋 최근 로그 (마지막 10줄):"
#           sudo journalctl -u llm-outfit-api --no-pager -n 10 || true
          
#           echo "🌐 포트 6020 상태:"
#           netstat -tlnp | grep 6020 || echo "포트 6020 확인 안됨"
          
#           echo "💽 최종 디스크 상태:"
#           df -h
          
#           echo "✅ 배포 완료!"
#           echo "📍 서버 주소: http://${{ secrets.LLM_OUTFIT_EC2_HOST }}:6020"