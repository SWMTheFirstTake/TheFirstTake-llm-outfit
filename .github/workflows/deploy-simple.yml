name: Deploy to EC2 (Simple)

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        echo "ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë..."
        # python -m pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.LLM_OUTFIT_EC2_HOST }}
        username: ${{ secrets.LLM_OUTFIT_EC2_USERNAME }}
        key: ${{ secrets.LLM_OUTFIT_EC2_SSH_KEY }}
        script: |
          echo "üöÄ TheFirstTake LLM Outfit API Î∞∞Ìè¨Î•º ÏãúÏûëÌï©ÎãàÎã§..."
          
          # ÌîÑÎ°úÏ†ùÌä∏ ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏ Î∞è ÏÑ§Ï†ï
          PROJECT_DIR="/home/ubuntu/TheFirstTake-llm-outfit"
          
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "üìÅ ÌîÑÎ°úÏ†ùÌä∏ ÎîîÎ†âÌÜ†Î¶¨Î•º ÏÉùÏÑ±ÌïòÍ≥† Î¶¨Ìè¨ÏßÄÌÜ†Î¶¨Î•º cloneÌï©ÎãàÎã§..."
            git clone https://github.com/SWMTheFirstTake/TheFirstTake-llm-outfit.git
            cd $PROJECT_DIR
          else
            echo "üìÅ Í∏∞Ï°¥ ÌîÑÎ°úÏ†ùÌä∏ ÎîîÎ†âÌÜ†Î¶¨Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§..."
            cd $PROJECT_DIR
            
            # git pull Ï†ÑÏóê Ï∂©ÎèåÌïòÎäî untracked ÌååÏùºÎì§ Ï†ïÎ¶¨
            echo "üßπ Ï∂©ÎèåÌïòÎäî ÌååÏùºÎì§ÏùÑ Ï†ïÎ¶¨Ìï©ÎãàÎã§..."
            git clean -fd
            git reset --hard HEAD
            
            git pull origin main
          fi
          
          # Python Í∞ÄÏÉÅÌôòÍ≤Ω ÌôïÏù∏ Î∞è ÏÉùÏÑ±
          if [ ! -d "venv" ]; then
            echo "üì¶ Python Í∞ÄÏÉÅÌôòÍ≤ΩÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§..."
            python3 -m venv venv
          fi
          
          # Í∞ÄÏÉÅÌôòÍ≤Ω ÌôúÏÑ±Ìôî Î∞è ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï (.env ÌååÏùº ÏÉùÏÑ±)
          echo "üîê ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÏÑ§Ï†ïÌï©ÎãàÎã§..."
          cat > .env <<EOF
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          S3_COMBINATION_BUCKET_NAME=${{ secrets.S3_COMBINATION_BUCKET_NAME }}
          S3_COMBINATION_BUCKET_IMAGE_PREFIX=${{ secrets.S3_COMBINATION_BUCKET_IMAGE_PREFIX }}
          S3_COMBINATION_BUCKET_JSON_PREFIX=${{ secrets.S3_COMBINATION_BUCKET_JSON_PREFIX }}
          ENVIRONMENT=production
          DEBUG=False
          LLM_API_HOST=0.0.0.0
          LLM_API_PORT=6020
          LOG_LEVEL=INFO
          EOF
          
          # .env ÌååÏùº Í∂åÌïú ÏÑ§Ï†ï (Î≥¥ÏïàÏÉÅ Ï§ëÏöî)
          chmod 600 .env

          echo "üîÑ Í∏∞Ï°¥ ÏÑúÎπÑÏä§Î•º Ï§ëÏßÄÌï©ÎãàÎã§..."
          # Ìè¨Ìä∏ Í∏∞Î∞ò Ï†ïÎ¶¨ (ÏïàÏ†ÑÌï®)
          echo "Ìè¨Ìä∏ 6020 Ï†ïÎ¶¨ Ï§ë..."
          lsof -ti:6020 | xargs -r kill -TERM 2>/dev/null || true
          sleep 3

          # systemctlÎèÑ Ïù¥Ï†ú ÏïàÏ†ÑÌïòÍ≤å ÏÇ¨Ïö© Í∞ÄÎä•
          if sudo systemctl is-active --quiet llm-outfit-api; then
              sudo systemctl stop llm-outfit-api
              sleep 3
          fi
          # echo "1Îã®Í≥Ñ: ÌòÑÏû¨ ÌîÑÎ°úÏÑ∏Ïä§ Î™©Î°ù ÌôïÏù∏"
          # ps aux | grep uvicorn | head -5

          # echo "2Îã®Í≥Ñ: Ìè¨Ìä∏ ÏÇ¨Ïö© ÏÉÅÌô© ÌôïÏù∏"
          # netstat -tlnp | grep 6020 || echo "Ìè¨Ìä∏ 6020 ÏÇ¨Ïö© ÏïàÌï®"

          # echo "3Îã®Í≥Ñ: lsofÎ°ú Ï†ïÎ¶¨"
          # lsof -ti:6020 | head -5 || echo "lsof Í≤∞Í≥º ÏóÜÏùå"

          # echo "4Îã®Í≥Ñ: Ïã§Ï†ú Ï†ïÎ¶¨ Ïã§Ìñâ"
          # lsof -ti:6020 | xargs -r kill -TERM 2>/dev/null || echo "kill Î™ÖÎ†πÏñ¥ ÏôÑÎ£å"

          # echo "‚úÖ Î™®Îì† Îã®Í≥Ñ ÏôÑÎ£å"
          
          # ÏÑúÎπÑÏä§ ÌååÏùº ÏÉùÏÑ±
          echo "‚öôÔ∏è ÏÑúÎπÑÏä§ ÌååÏùºÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§..."
          sudo tee /etc/systemd/system/llm-outfit-api.service > /dev/null <<EOF
          [Unit]
          Description=TheFirstTake LLM Outfit API
          After=network.target
          
          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=$PROJECT_DIR
          Environment=PATH=$PROJECT_DIR/venv/bin
          Environment=ENVIRONMENT=production
          Environment=DEBUG=False
          Environment=LLM_API_HOST=0.0.0.0
          Environment=LLM_API_PORT=6020
          Environment=REDIS_HOST=${{ secrets.REDIS_HOST }}
          Environment=REDIS_PORT=${{ secrets.REDIS_PORT }}
          Environment=AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          Environment=AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          Environment=AWS_REGION=${{ secrets.AWS_REGION }}
          Environment=S3_COMBINATION_BUCKET_NAME=${{ secrets.S3_COMBINATION_BUCKET_NAME }}
          Environment=S3_COMBINATION_BUCKET_IMAGE_PREFIX=${{ secrets.S3_COMBINATION_BUCKET_IMAGE_PREFIX }}
          Environment=S3_COMBINATION_BUCKET_JSON_PREFIX=${{ secrets.S3_COMBINATION_BUCKET_JSON_PREFIX }}
          Environment=LOG_LEVEL=INFO
          ExecStart=$PROJECT_DIR/venv/bin/uvicorn main:app --host 0.0.0.0 --port 6020
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # ÏÑúÎπÑÏä§ Îì±Î°ù Î∞è ÏãúÏûë
          echo "üöÄ ÏÑúÎπÑÏä§Î•º ÏãúÏûëÌï©ÎãàÎã§..."
          sudo systemctl daemon-reload
          sudo systemctl enable llm-outfit-api
          sudo systemctl start llm-outfit-api
          
          # Î∞∞Ìè¨ ÌôïÏù∏
          echo "‚úÖ Î∞∞Ìè¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!"
          echo "üìç ÏÑúÎ≤Ñ Ï£ºÏÜå: http://${{ secrets.LLM_OUTFIT_EC2_HOST }}:6020"
          
          # ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏
          sudo systemctl status llm-outfit-api --no-pager

# name: Deploy to ECS

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# env:
#   AWS_REGION: ${{ secrets.AWS_REGION }}
#   ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
#   ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}

# jobs:
#   test:
#     runs-on: ubuntu-latest
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.11'
    
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
    
#     - name: Run tests
#       run: |
#         echo "ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë..."
#         # python -m pytest

#   deploy-llm:
#     needs: test
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v2

#     - name: Build, tag, and push LLM image
#       id: build-llm
#       env:
#         ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_LLM }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         echo "üî® Building Docker image..."
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
#         echo "üì§ Pushing image to ECR..."
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
#         echo "‚úÖ Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#     - name: Download current task definition
#       run: |
#         echo "üìã Downloading current task definition..."
#         aws ecs describe-task-definition \
#           --task-definition thefirsttake-llm \
#           --query 'taskDefinition' > task-definition.json

#     - name: Update task definition with new image and environment variables
#       id: task-def
#       run: |
#         echo "üîÑ Updating task definition..."
        
#         # ÏÉàÎ°úÏö¥ Ïù¥ÎØ∏ÏßÄÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÍ≥† ÌôòÍ≤ΩÎ≥ÄÏàò ÏÑ§Ï†ï
#         jq --arg IMAGE "${{ steps.build-llm.outputs.image }}" \
#            --arg OPENAI_API_KEY "${{ secrets.OPENAI_API_KEY }}" \
#            --arg CLAUDE_API_KEY "${{ secrets.CLAUDE_API_KEY }}" \
#            --arg REDIS_HOST "${{ secrets.REDIS_HOST }}" \
#            --arg REDIS_PORT "${{ secrets.REDIS_PORT }}" \
#            --arg AWS_ACCESS_KEY "${{ secrets.AWS_ACCESS_KEY }}" \
#            --arg AWS_SECRET_KEY "${{ secrets.AWS_SECRET_KEY }}" \
#            --arg AWS_REGION "${{ secrets.AWS_REGION }}" \
#            --arg S3_COMBINATION_BUCKET_NAME "${{ secrets.S3_COMBINATION_BUCKET_NAME }}" \
#            --arg S3_COMBINATION_BUCKET_IMAGE_PREFIX "${{ secrets.S3_COMBINATION_BUCKET_IMAGE_PREFIX }}" \
#            --arg S3_COMBINATION_BUCKET_JSON_PREFIX "${{ secrets.S3_COMBINATION_BUCKET_JSON_PREFIX }}" \
#            '
#            .containerDefinitions[0].image = $IMAGE |
#            .containerDefinitions[0].environment = [
#              {"name": "OPENAI_API_KEY", "value": $OPENAI_API_KEY},
#              {"name": "CLAUDE_API_KEY", "value": $CLAUDE_API_KEY},
#              {"name": "REDIS_HOST", "value": $REDIS_HOST},
#              {"name": "REDIS_PORT", "value": $REDIS_PORT},
#              {"name": "AWS_ACCESS_KEY", "value": $AWS_ACCESS_KEY},
#              {"name": "AWS_SECRET_KEY", "value": $AWS_SECRET_KEY},
#              {"name": "AWS_REGION", "value": $AWS_REGION},
#              {"name": "S3_COMBINATION_BUCKET_NAME", "value": $S3_COMBINATION_BUCKET_NAME},
#              {"name": "S3_COMBINATION_BUCKET_IMAGE_PREFIX", "value": $S3_COMBINATION_BUCKET_IMAGE_PREFIX},
#              {"name": "S3_COMBINATION_BUCKET_JSON_PREFIX", "value": $S3_COMBINATION_BUCKET_JSON_PREFIX},
#              {"name": "ENVIRONMENT", "value": "production"},
#              {"name": "DEBUG", "value": "False"},
#              {"name": "LLM_API_HOST", "value": "0.0.0.0"},
#              {"name": "LLM_API_PORT", "value": "6020"},
#              {"name": "LOG_LEVEL", "value": "INFO"}
#            ] |
#            del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)
#            ' task-definition.json > new-task-definition.json

#     - name: Register new task definition
#       id: register-task-def
#       run: |
#         echo "üìù Registering new task definition..."
#         NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
#           --cli-input-json file://new-task-definition.json \
#           --query 'taskDefinition.taskDefinitionArn' \
#           --output text)
        
#         echo "‚úÖ New task definition: $NEW_TASK_DEF_ARN"
#         echo "task-def-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

#     - name: Debug ECS Variables
#       run: |
#         echo "üîç Debugging ECS configuration..."
#         echo "ECS_CLUSTER: ${{ env.ECS_CLUSTER }}"
#         echo "ECS_SERVICE_LLM: 'thefirsttake-llm-service-oqrj3cfl'"
#         echo "Length of service name: ${ECS_SERVICE_LLM}"
    
#     - name: Update ECS LLM Service
#       run: |
#         echo "üöÄ Updating ECS service..."
#         SERVICE_NAME="thefirsttake-llm-service-oqrj3cfl"
#         TASK_DEFINITION="${{ steps.register-task-def.outputs.task-def-arn }}"
#         CLUSTER_NAME="the-first-take-cluster"
#         aws ecs update-service --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}" --task-definition "${TASK_DEFINITION}" --force-new-deployment

#     - name: Wait for service stability
#       run: |
#         echo "‚è≥ Waiting for service to stabilize..."
#         CLUSTER_NAME="the-first-take-cluster"
#         SERVICE_NAME="thefirsttake-llm-service-oqrj3cfl"
#         aws ecs wait services-stable --cluster "${CLUSTER_NAME}" --services "${SERVICE_NAME}"
#         echo "‚úÖ Service deployment completed!"

#   health-check:
#     needs: deploy-llm
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#     - name: Health Check
#       run: |
#         echo "üîç Performing health check..."
        
#         # LLM ÏÑúÎπÑÏä§Ïùò Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏
#         for i in {1..30}; do
#           if curl -f -s https://the-second-take.com/llm/api/health; then
#             echo "‚úÖ Health check passed!"
#             exit 0
#           fi
#           echo "Waiting for service to be healthy... ($i/30)"
#           sleep 10
#         done
        
#         echo "‚ùå Health check failed after 5 minutes!"
#         exit 1

#     - name: Deployment Success Notification
#       if: success()
#       run: |
#         echo "üéâ Deployment successful!"
#         echo "üåê LLM Service deployed to ECS"
#         echo "üè• Health Check: https://the-second-take.com/llm/api/health"
