# name: Deploy to EC2

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   test:
#     runs-on: ubuntu-latest
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.11'
    
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
    
#     - name: Run tests
#       run: |
#         # 여기에 테스트 명령어를 추가하세요
#         echo "테스트 실행 중..."
#         # python -m pytest

#   deploy:
#     needs: test
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#     - uses: actions/checkout@v4
    
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.LLM_OUTFIT_AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.LLM_OUTFIT_AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ secrets.LLM_OUTFIT_AWS_REGION }}
    
#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v2
    
#     - name: Build, tag, and push image to Amazon ECR
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: llm-outfit-api
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
#     - name: Deploy to EC2
#       uses: appleboy/ssh-action@v1.0.0
#       with:
#         host: ${{ secrets.LLM_OUTFIT_EC2_HOST }}
#         username: ${{ secrets.LLM_OUTFIT_EC2_USERNAME }}
#         key: ${{ secrets.LLM_OUTFIT_EC2_SSH_KEY }}
#         script: |
#           # Docker 설치 확인
#           if ! command -v docker &> /dev/null; then
#             echo "Docker가 설치되어 있지 않습니다. 설치를 시작합니다..."
#             sudo apt-get update
#             sudo apt-get install -y docker.io docker-compose
#             sudo usermod -aG docker $USER
#           fi
          
#           # ECR 로그인
#           aws ecr get-login-password --region ${{ secrets.LLM_OUTFIT_AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
#           # 기존 컨테이너 중지 및 제거
#           docker stop llm-outfit-api || true
#           docker rm llm-outfit-api || true
          
#           # 새 이미지 풀
#           docker pull ${{ steps.login-ecr.outputs.registry }}/llm-outfit-api:latest
          
#           # 새 컨테이너 실행
#           docker run -d \
#             --name llm-outfit-api \
#             --restart unless-stopped \
#             -p 6020:6020 \
#             -e ENVIRONMENT=production \
#             ${{ steps.login-ecr.outputs.registry }}/llm-outfit-api:latest
          
#           echo "배포가 완료되었습니다!" 